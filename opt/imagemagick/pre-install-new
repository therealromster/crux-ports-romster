#!/bin/bash

source Pkgfile
source /etc/pkgmk.conf

[ -z "${EXT}" ] && EXT='.tar.bz2'
[ -z "${sname}" ] && sname="${name}"
[ -z "${diff[@]}" ] && diff=(${source})
[ -z "${PKGMK_WORK_DIR}" ] && PKGMK_WORK_DIR="$PWD/work"
[ -z "${PKGMK_SOURCE_DIR}" ] && PKGMK_SOURCE_DIR="$PWD"

# pkgmk functions #########################################
info() {
	echo "=======> $1"
}

warning() {
	info "WARNING: $1" >&2
}

error() {
	info "ERROR: $1" >&2
}

get_filename() {
	local FILE="`echo "$1" | sed 's|^.*://.*/||g'`"

	if [ "$FILE" != "$1" ]; then
		FILE="${PKGMK_SOURCE_DIR}/$FILE"
	fi

	echo $FILE
}

get_basename() {
	local FILE="`echo $1 | sed 's|^.*://.*/||g'`"
	echo $FILE
}

check_pkgfile() {
	if [ ! "${name}" ]; then
		error "Variable 'name' not specified in ${PKGMK_PKGFILE}."
		exit 1
	elif [ ! "${version}" ]; then
		error "Variable 'version' not specified in ${PKGMK_PKGFILE}."
		exit 1
	elif [ ! "${release}" ]; then
		error "Variable 'release' not specified in ${PKGMK_PKGFILE}."
		exit 1
	elif [ "`type -t build`" != "function" ]; then
		error "Function 'build' not specified in ${PKGMK_PKGFILE}."
		exit 1
	fi
}

check_directory() {
	local DIRECTORY="`echo $1 | sed -e "s|${name}||"`"
	if [ ! -d "$DIRECTORY" ]; then
		error "Directory '$DIRECTORY' does not exist."
		exit 1
	elif [ ! -w "$DIRECTORY" ]; then
		error "Directory '$DIRECTORY' not writable."
		exit 1
	elif [ ! -x "$DIRECTORY" ] || [ ! -r "$DIRECTORY" ]; then
		error "Directory '$DIRECTORY' not readable."
		exit 1
	fi
	if [ ! -d "$1" ]; then
		mkdir "$1"
	fi
}

download_file() {
	local ERROR URL LOCAL_FILENAME LOCAL_FILENAME_PARTIAL DOWNLOAD_OPTS \
		RESUME_CMD BASENAME

	URL="$1"
	info "Downloading '$URL'."

	if [ ! "`type -p curl`" ]; then
		error "Command 'curl' not found."
		exit 1
	fi

	LOCAL_FILENAME="`get_filename "$URL"`"
	LOCAL_FILENAME_PARTIAL="$LOCAL_FILENAME.partial"
	DOWNLOAD_OPTS="-q --fail --globoff --progress-bar --retry 5 \
		--speed-time 5 --speed-limit 1024 \
		--output ${PKGMK_SOURCE_DIR}/${LOCAL_FILENAME_PARTIAL}"

	if [ -f "$LOCAL_FILENAME_PARTIAL" ]; then
		info "Partial download found, trying to resume"
		RESUME_CMD="--continue-at -"
	fi

	ERROR=1

	BASENAME="`get_basename "$URL"`"
	for REPO in ${PKGMK_SOURCE_MIRRORS[@]}; do
		REPO="`echo $REPO | sed 's|/$||'`"
		curl "$DOWNLOAD_OPTS" "$RESUME_CMD" "$REPO/$BASENAME"
		ERROR=$?
		if [ $ERROR == 0 ]; then
			break
		fi
	done

	if [ $ERROR != 0 ]; then
		while true; do
			curl "$DOWNLOAD_OPTS" "$RESUME_CMD" "$URL"
			ERROR=$?
			if [ $ERROR != 0 ] && [ "$RESUME_CMD" ]; then
				info "Partial download failed, restarting"
				rm -f "$LOCAL_FILENAME_PARTIAL"
				RESUME_CMD=""
			else
				break
			fi
		done
	fi
	
	if [ $ERROR != 0 ]; then
		error "Downloading '$URL' failed."
		exit 1
	fi
	
	mv -f "$LOCAL_FILENAME_PARTIAL" "$LOCAL_FILENAME"
}

download_source() {
	local FILE FILENAME

	for FILE in ${source[@]}; do
		FILENAME="`get_filename "$FILE"`"
		if [ ! -e "$FILENAME" ]; then
			if [ "$FILENAME" = "$FILE" ]; then
				error "Source file '$FILENAME' not found (can not be downloaded, URL not specified)."
				exit 1
			else
				if [ "$PKGDL_DOWNLOAD" = "yes" ]; then
					download_file "$FILE"
				else
					error "Source file '$FILENAME' not found (use option -d to download)."
					exit 1
				fi
			fi
		fi
	done
}

unpack_source() {
	local URL FILENAME COMMAND
	
	for URL in ${source[@]}; do
		FILE="`get_filename "$URL"`"
		case "$FILE" in
			*.tar.gz|*.tar.Z|*.tgz)
				COMMAND="tar -C $SRC --use-compress-program=gzip -xf ${LOCAL_FILENAME}" ;;
			*.tar.bz2)
				COMMAND="tar -C $SRC --use-compress-program=bzip2 -xf ${LOCAL_FILENAME}" ;;
			*.tar.lzma)
				COMMAND="tar -C $SRC --use-compress-program=lzma -xf ${LOCAL_FILENAME}" ;;
			*.zip)
				COMMAND="unzip -qq -o -d $SRC ${LOCAL_FILENAME}" ;;
			*)
				COMMAND="cp ${LOCAL_FILENAME} $SRC" ;;
		esac

		echo "$COMMAND"

		$COMMAND

		if [ $? != 0 ]; then
			if [ "$PKGDL_KEEP_WORK" = 'no' ]; then
				rm -rf "${PKGMK_WORK_DIR}"
			fi
			error "Building '$TARGET' failed."
			exit 1
		fi
	done
}

###########################################################

is_installed() {
	local PACKAGE="$1"
	if [ ! -z "$PACKAGE" ] && [ -z "`pkginfo -i | egrep '^$1 '`" ]; then
		warn "'$PACKAGE' is not installed, can not do a incremental update."
		exit
	fi
}
################


if [ -e "${PKGMK_SOURCE_DIR}/${sname}-${version}${EXT}" ]; then
	notice "Source file is upto date."
fi

if [ -e "${PKGMK_SOURCE_DIR}/${sname}-${OLD_VERSION}${EXT}" ]; then
	warn "Missing old source file '${sname}-${OLD_VERSION}${EXT}'."
	exit
fi

is_installed 'xdelta'
if [ "${EXT}" == '.tar.lzma' ] && is_installed 'lzma'

if [ ! -e "${PKGMK_WORK_DIR}" ]; then
	mkdir -p "${PKGMK_WORK_DIR}"
fi
cd "${PKGMK_WORK_DIR}"

if [ ! -e "${PKGMK_SOURCE_DIR}/${sname}-${OLD_VERSION}.tar-${sname}-${version}.tar.xdelta" ]; then
	DOWNLOAD_OPTS="-q --fail --globoff --progress-bar --retry 5 --speed-time 5 --speed-limit 1024 \
		--user-agent 'pkgdl HVLinux'"

	curl "$DOWNLOAD_OPTS" --url "${diff}/${sname}-${OLD_VERSION}.tar-${sname}-${version}.tar.xdelta" \
		--output "${PKGMK_SOURCE_DIR}/${sname}-${OLD_VERSION}.tar-${sname}-${version}.tar.xdelta"
fi

cp "${PKGMK_SOURCE_DIR}/${sname}-${OLD_VERSION}${EXT}" .
cp "${PKGMK_SOURCE_DIR}/${sname}-${OLD_VERSION}.tar-${sname}-${version}.tar.xdelta" .
echo -n '[ 25%] Decompressing source, '
lzma -d "${sname}-${OLD_VERSION}${EXT}"
echo 'done.'

echo -n '[ 50%] Patching source, '
xdelta patch "${sname}-${OLD_VERSION}.tar-${sname}-${version}.tar.xdelta"
rm "${sname}-${OLD_VERSION}.tar"
mv "${sname}-${OLD_VERSION}.tar-${sname}-${version}.tar.xdelta" "${PKGMK_SOURCE_DIR}/"
echo 'done.'

echo -n '[ 75%] Compressing patched source, '
lzma -9 "${sname}-${version}.tar"
echo 'done.'

echo -n '[100%] Saving patched source, '
mv "${sname}-${version}${EXT}" "${PKGMK_SOURCE_DIR}/"
echo 'done.'

cd - > /dev/null
if [ -e "${PKGMK_WORK_DIR}" ]; then
	rm -rf "${PKGMK_WORK_DIR}"
fi


# End of file
