#!/bin/sh

pkg_init() {
	unset TMP_XDELTA_FILE_LIST
	PKG_COUNT=1
}

log_verbose() {
	if [ "${PKG_LOG_VERBOSE}" = 'yes' ]; then
		#printf  "[%3.0f%s] %s\n" "$(bc -l <<< "($PKG_COUNT / $PKG_LOG_VERBOSE_TOTAL_COUNT) * 100")" '%' "${1}"
		printf  "[%3.0f%s] %s\n" "$(printf "(${PKG_COUNT} / ${PKG_LOG_VERBOSE_TOTAL_COUNT}) * 100\n" |bc -l)" '%' "${1}"
		PKG_COUNT=$(($PKG_COUNT+1))
	fi
}

log_very_verbose() {
	if [ "${PKG_LOG_VERY_VERBOSE}" = 'yes' ]; then
		printf  "[LOG_VERY_VERBOSE] %s\n" "${1}"
	fi
}

array() {
	printf "${2}" |tr --delete '\n' |sed \
		-e 's|[\t| ]\+| |g' \
		-e 's| ||' |cut --delimiter=' ' --fields="${1}"
}

pkg_checks() {
	if [ -e "${PKGMK_SOURCE_DIR}/${sname}-${version}${EXT}" ]; then
		printf "You have the latest source archive.\n"
		exit
	fi

	if [ -z "$(ls ${PKGMK_SOURCE_DIR}/${sname}-*${EXT})" ]; then
		printf "No source archive to use; proceed to download source archive.\n"
		exit
	fi

	# check for needed programs
	if [ -z "$(pkginfo -i | egrep '^coreutils ')" ]; then
		printf "Warning: 'coreutils' is not installed can not do a incremental update.\n"
		exit
	fi

	case ${EXT} in
		.tar.gz)
			if [ -z "$(pkginfo -i | egrep '^gzip ')" ]; then
				printf "Warning: 'gzip' is not installed can not do a incremental update.\n"
				exit 1
			fi
		;;
		.tar.bz2)
			if [ -z "$(pkginfo -i | egrep '^bzip2 ')" ]; then
				printf "Warning: 'bzip2' is not installed can not do a incremental update.\n"
				exit 1
			fi
		;;
		.tar.lzma)
 	 		if [ -z "$(pkginfo -i | egrep '^lzma ')" ]; then
				printf "Warning: 'lzma' is not installed can not do a incremental update.\n"
				exit 1
			fi
		;;
		.tar.lrzip)
 	 		if [ -z "$(pkginfo -i | egrep '^lrzip ')" ]; then
				printf "Warning: 'lrzip' is not installed can not do a incremental update.\n"
				exit 1
			fi
		;;
	esac

	if [ -z "$(pkginfo -i | egrep '^tar ')" ]; then
		printf "Warning: 'tar' is not installed can not do a incremental update.\n"
		exit
	fi

	if [ -z "$(pkginfo -i | egrep '^sed ')" ]; then
		printf "Warning: 'sed' is not installed can not do a incremental update.\n"
		exit
	fi

	if [ -z "$(pkginfo -i | egrep '^bc ')" ]; then
		printf "Warning: 'bc' is not installed can not do a incremental update.\n"
		exit
	fi

	if [ -z "$(pkginfo -i | egrep '^xdelta ')" ]; then
		printf "Warning: 'xdelta' is not installed can not do a incremental update.\n"
		exit
	fi

	if [ -z "$(pkginfo -i | egrep '^curl ')" ]; then
		printf "Warning: 'curl' is not installed can not do a incremental update.\n"
		exit
	fi
}

pkg_work_dir() {
	if [ ! -e "${PKGMK_WORK_DIR}" ]; then
		mkdir -p "${PKGMK_WORK_DIR}" || exit 1
	fi
	cd "${PKGMK_WORK_DIR}" || exit 1
}

pkg_download_delta_list() {
	local URL="$(array "${PKG_DIFF_MIRROR}" "${PKG_DIFF_MIRRORS}")"
	#local URL="$(printf "${PKG_DIFF_MIRRORS}" |tr --delete '\n' |sed -e 's|[\t| ]\+| |g' -e 's| ||' |cut --delimiter=' ' --fields="${PKG_DIFF_MIRROR}")"
	printf "Patching source files.\n"
	log_verbose "Retrieving delta list from '$URL'."

	log_very_verbose "curl -s "$URL" |grep '.xdelta' |grep "${sname}" |sed -e 's|.*[HREF|href]=\"||' -e 's|\".*||' |sort --reverse |xargs"
	XDELTA_FILES="$(curl -s "$URL" |grep '.xdelta' |grep "${sname}" |sed -e 's|.*[HREF|href]=\"||' -e 's|\".*||' |sort --reverse |xargs)"

	if [ -z "${XDELTA_FILES}" ]; then
		printf "Warning: could not download xdelta file list.\n"
		exit 1
	fi
}

pkg_parse_delta_list() {
	local FILE SOURCE_VERSION SOURCE_VERSIONS GET_VERSION ADD_DIFF \
		PATCH_NEW_VERSION PATCH_OLD_VERSION PATCH_OLD_VERSIONS
	GET_VERSION='yes'
	ADD_DIFF='yes'

	SOURCE_VERSIONS="$(ls --reverse ${PKGMK_SOURCE_DIR}/${sname}-*${EXT} \
			|sed -e "s|.*/${sname}-\(.*\)${EXT}|\1|" |xargs)"

	if [ "${PKG_LOG_VERY_VERBOSE}" = 'yes' ]; then
		log_very_verbose "Source version list: ${SOURCE_VERSIONS}"
	
		for FILE in $XDELTA_FILES; do
			#PATCH_NEW_VERSION="$(printf ${FILE} |sed -e "s|^$sname-.*.tar-$sname-\(.*\).tar.*|\1|")"
			PATCH_OLD_VERSION="$(printf ${FILE} |sed -e "s|^$sname-\(.*\).tar-$sname-.*|\1|")"
			PATCH_OLD_VERSIONS="${PATCH_OLD_VERSION} ${PATCH_OLD_VERSIONS}"
		done

		log_very_verbose "Diff version list: ${PATCH_OLD_VERSIONS}"
		unset PATCH_OLD_VERSIONS
	fi

	for SOURCE_VERSION in $SOURCE_VERSIONS; do
		for FILE in $XDELTA_FILES; do
			#PATCH_NEW_VERSION="$(printf ${FILE} |sed -e "s|^$sname-.*.tar-$sname-\(.*\).tar.*|\1|")"
			PATCH_OLD_VERSION="$(printf ${FILE} |sed -e "s|^$sname-\(.*\).tar-$sname-.*|\1|")"
			if [ "${GET_VERSION}" = 'yes' ]; then
				if [ "${SOURCE_VERSION}" = "${PATCH_OLD_VERSION}" ]; then
					HAS_VERSION="${SOURCE_VERSION}"
					GET_VERSION='no'
				fi
			fi
		done
	done
	if [ -z "${HAS_VERSION}" ]; then
		printf "Warning: No source archive matches any delta version.\n"
		exit
	fi
	log_very_verbose "Using source archive ${sname}-${HAS_VERSION}${EXT}."

	for FILE in $XDELTA_FILES; do
		#PATCH_NEW_VERSION="$(printf ${FILE} |sed -e "s|^$sname-.*.tar-$sname-\(.*\).tar.*|\1|")"
		PATCH_OLD_VERSION="$(printf ${FILE} |sed -e "s|^$sname-\(.*\).tar-$sname-.*|\1|")"
		if [ "${ADD_DIFF}" = 'yes' ]; then
			TMP_XDELTA_FILE_LIST="${FILE} ${TMP_XDELTA_FILE_LIST}"
			if [ "${HAS_VERSION}" = "${PATCH_OLD_VERSION}" ]; then
				ADD_DIFF='no'
			fi
		fi
	done
}

pkg_download_diff() {
	local COUNT TOTAL FILE DOWNLOAD_TOTAL
	COUNT=1

	# count missing files to download.
	for FILE in ${TMP_XDELTA_FILE_LIST}; do
		if [ ! -e "${PKGMK_SOURCE_DIR}/${FILE}" ]; then
			DOWNLOAD_TOTAL="${FILE} ${DOWNLOAD_TOTAL}"
		fi
	done
	TOTAL="$(printf "${DOWNLOAD_TOTAL}" |wc --words)"
	unset DOWNLOAD_TOTAL

	if [ "${TOTAL}" -gt 0 ]; then
		printf "%s\n" "Downloading deltas."
	elif [ "${TOTAL}" -gt 1 ]; then
		printf "%s\n" "Downloading delta."
	fi

	for FILE in ${TMP_XDELTA_FILE_LIST}; do
		if [ ! -e "${PKGMK_SOURCE_DIR}/${FILE}" ]; then
			#printf  "  [%3.0f%s] %s\n" "$(bc -l <<< "($COUNT / $TOTAL) * 100")" '%' "Downloading ${FILE}."
			printf  "  [%3.0f%s] %s\n" "$(printf "($COUNT / $TOTAL) * 100\n"  |bc -l)" '%' "Downloading ${FILE}."

			#wget --quiet --tries=3 --timeout=20 $(printf "${PKG_DIFF_MIRRORS}" |cut --delimiter=' ' --fields="${PKG_DIFF_MIRROR}")/${FILE} --directory-prefix=${PKGMK_SOURCE_DIR}

			curl --silent --remote-name --retry 3 $(printf "${PKG_DIFF_MIRRORS}" |cut --delimiter=' ' --fields="${PKG_DIFF_MIRROR}")/${FILE}
			mv "${FILE}" "${PKGMK_SOURCE_DIR}/${FILE}"
			COUNT=$(($COUNT+1))
		fi
		log_very_verbose "Copying ${PKGMK_SOURCE_DIR}/${FILE} to ${PKGMK_WORK_DIR}/"
		cp "${PKGMK_SOURCE_DIR}/${FILE}" . || exit 1
	done
	if [ "${TOTAL}" -gt 0 ]; then
		printf "Done.\n"
	fi
}

pkg_extract() {
	log_very_verbose "Copying ${PKGMK_SOURCE_DIR}/${sname}-${HAS_VERSION}${EXT} to ${PKGMK_WORK_DIR}/"
	cp "${PKGMK_SOURCE_DIR}/${sname}-${HAS_VERSION}${EXT}" .
	log_verbose 'Decompressing source archive.'
	case ${EXT} in
		.tar.gz) gzip -d "${sname}-${HAS_VERSION}${EXT}" ;;
		.tar.bz2) bzip2 -d "${sname}-${HAS_VERSION}${EXT}" ;;
		.tar.lzma) lzma -d "${sname}-${HAS_VERSION}${EXT}" ;;
		.tar.lrzip) lrzip -d "${sname}-${HAS_VERSION}${EXT}" ;;
	esac
	log_very_verbose "Decompressed tarball ${sname}-${HAS_VERSION}${EXT} to ${sname}-${HAS_VERSION}.tar"
}

pkg_patch() {
	local PATCH PATCH_OLD_VERSION COUNT TOTAL
	TOTAL="$(printf "${TMP_XDELTA_FILE_LIST}" |wc --words)"
	COUNT=1
	printf "Patching source code.\n"
	for PATCH in ${TMP_XDELTA_FILE_LIST}; do
		PATCH_OLD_VERSION="$(printf ${PATCH} |sed -e "s|^$sname-\(.*\).tar-$sname-.*|\1|")"
		log_very_verbose "Patching ${sname}-${PATCH_OLD_VERSION}.tar with ${PATCH}"
		printf  "  [%3.0f%s] %s\n" "$(printf "($COUNT / $TOTAL) * 100\n"  |bc -l)" '%' "Applying patch ${PATCH}."
		COUNT=$(($COUNT+1))
		xdelta patch "${PATCH}" || exit 1
		log_very_verbose "Removing old files ${PATCH} ${sname}-${PATCH_OLD_VERSION}.tar"
		rm "${PATCH}" "${sname}-${PATCH_OLD_VERSION}.tar"
	done
	printf "Done.\n"
}

pkg_compress() {
	log_verbose 'Compressing patched source archive.'
	case ${EXT} in
		.tar.gz) gzip -9 "${sname}-${version}.tar" ;;
		.tar.bz2) bzip2 -9 "${sname}-${version}.tar" ;;
		.tar.lzma) lzma -9 "${sname}-${version}.tar" ;;
		.tar.lrzip) lrzip -L 9 "${sname}-${version}.tar" ;;
	esac
}

pkg_save_new_source() {
	log_verbose 'Saving archive.'
	log_very_verbose "Moving ${sname}-${version}${EXT} to $PKGMK_SOURCE_DIR/"
	mv "${sname}-${version}${EXT}" "$PKGMK_SOURCE_DIR/"
	cd - > /dev/null
	rmdir "$PKGMK_WORK_DIR"
	printf "Done.\n"
}

main() {
	pkg_init
	pkg_checks
	pkg_work_dir
	pkg_download_delta_list
	pkg_parse_delta_list
	pkg_download_diff
	pkg_extract
	pkg_patch
	pkg_compress
	pkg_save_new_source
}

. ./Pkgfile
. /etc/pkgmk.conf

[ -z "${PKGMK_WORK_DIR}" ] && PKGMK_WORK_DIR="$PWD/work"
[ -z "${PKGMK_SOURCE_DIR}" ] && PKGMK_SOURCE_DIR="$PWD"
[ -z "${sname}" ] && sname="${name}"
[ -z "${EXT}" ] && EXT='.tar.gz'

# if diff is set overide the default
[ -n "${diff}" ] && PKG_DIFF_MIRRORS="${diff}"
[ -z "${PKG_DIFF_MIRRORS}" ] && PKG_DIFF_MIRRORS=''

#if [ -z "${PKG_DIFF_MIRROR}" ]; then
#	PKG_DIFF_MIRROR_TOTAL="$(printf "${PKG_DIFF_MIRRORS}" |wc --words)"
#	PKG_DIFF_MIRROR_RANDOM="$(dd if=/dev/urandom count=1 2> /dev/null | cksum \
#		| cut -f1 -d" " |sed -e 's/\([0-9]\).*/\1/')"
#	CONTINUE='yes'

#	while [ $PKG_DIFF_MIRROR_RANDOM -lt $(($PKG_DIFF_MIRROR_TOTAL+1)) ] && [ $CONTINUE = 'yes' ]; do
#		if [ -n $PKG_DIFF_MIRROR_RANDOM ]; then
#			CONTINUE='no'
#			PKG_DIFF_MIRROR="${PKG_DIFF_MIRROR_RANDOM}"
#		fi
#		PKG_DIFF_MIRROR_RANDOM="$(dd if=/dev/urandom count=1 2> /dev/null \
#			| cksum | cut -f1 -d" " |sed -e 's/\([0-9]\).*/\1/')"
#	done
#fi
#echo $PKG_DIFF_MIRROR

[ -z "${PKG_LOG_VERY_VERBOSE}" ] && PKG_LOG_VERY_VERBOSE='no'
[ -z "${PKG_LOG_VERBOSE}" ] && PKG_LOG_VERBOSE='yes'

readonly PKG_LOG_VERBOSE_TOTAL_COUNT=5
PKG_DIFF_MIRROR=1

main "$@"

# End of file
