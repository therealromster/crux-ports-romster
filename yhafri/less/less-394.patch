--- line.c.orig	Tue Feb 25 13:34:37 2003
+++ line.c	Tue Feb 25 13:55:14 2003
@@ -315,6 +315,174 @@
 }
 
 /*
+ * Deal with composing/combining characters (should not be counted).
+ */
+struct interval
+{
+     unsigned short first;
+     unsigned short last;
+};
+
+/*
+ * Return TRUE if "c" is in "table[size]".
+ */
+        static int
+intable(c, table, size)
+        int             c;
+        struct interval *table;
+        int             size;
+{
+     int mid, bot, top;
+
+     /* first quick check for Latin1 etc. characters */
+     if (c < table[0].first)
+          return FALSE;
+
+     /* binary search in table */
+     bot = 0;
+     top = size - 1;
+     while (top >= bot)
+     {
+          mid = (bot + top) / 2;
+          if (table[mid].last < c)
+               bot = mid + 1;
+          else if (table[mid].first > c)
+               top = mid - 1;
+          else
+               return TRUE;
+     }
+
+     return FALSE;
+}
+
+/*
+ * Return TRUE if "c" is a composing UTF-8 character.
+ * This means it will be drawn on top of the preceding
+ * character and should not be counted as taking up a
+ * column character count within the line.
+ * - Based on code from Markus Kuhn.
+ */
+        int
+utf_iscomposed(c)
+        int c;
+{
+    /* sorted list of non-overlapping intervals */
+    static struct interval composing[] =
+    {
+        {0x0300, 0x034E}, {0x0360, 0x0362}, {0x0483, 0x0486}, {0x0488, 0x0489},
+        {0x0591, 0x05A1}, {0x05A3, 0x05B9}, {0x05BB, 0x05BD}, {0x05BF, 0x05BF},
+        {0x05C1, 0x05C2}, {0x05C4, 0x05C4}, {0x064B, 0x0655}, {0x0670, 0x0670},
+        {0x06D6, 0x06E4}, {0x06E7, 0x06E8}, {0x06EA, 0x06ED}, {0x0711, 0x0711},
+        {0x0730, 0x074A}, {0x07A6, 0x07B0}, {0x0901, 0x0902}, {0x093C, 0x093C},
+        {0x0941, 0x0948}, {0x094D, 0x094D}, {0x0951, 0x0954}, {0x0962, 0x0963},
+        {0x0981, 0x0981}, {0x09BC, 0x09BC}, {0x09C1, 0x09C4}, {0x09CD, 0x09CD},
+        {0x09E2, 0x09E3}, {0x0A02, 0x0A02}, {0x0A3C, 0x0A3C}, {0x0A41, 0x0A42},
+        {0x0A47, 0x0A48}, {0x0A4B, 0x0A4D}, {0x0A70, 0x0A71}, {0x0A81, 0x0A82},
+        {0x0ABC, 0x0ABC}, {0x0AC1, 0x0AC5}, {0x0AC7, 0x0AC8}, {0x0ACD, 0x0ACD},
+        {0x0B01, 0x0B01}, {0x0B3C, 0x0B3C}, {0x0B3F, 0x0B3F}, {0x0B41, 0x0B43},
+        {0x0B4D, 0x0B4D}, {0x0B56, 0x0B56}, {0x0B82, 0x0B82}, {0x0BC0, 0x0BC0},
+        {0x0BCD, 0x0BCD}, {0x0C3E, 0x0C40}, {0x0C46, 0x0C48}, {0x0C4A, 0x0C4D},
+        {0x0C55, 0x0C56}, {0x0CBF, 0x0CBF}, {0x0CC6, 0x0CC6}, {0x0CCC, 0x0CCD},
+        {0x0D41, 0x0D43}, {0x0D4D, 0x0D4D}, {0x0DCA, 0x0DCA}, {0x0DD2, 0x0DD4},
+        {0x0DD6, 0x0DD6}, {0x0E31, 0x0E31}, {0x0E34, 0x0E3A}, {0x0E47, 0x0E4E},
+        {0x0EB1, 0x0EB1}, {0x0EB4, 0x0EB9}, {0x0EBB, 0x0EBC}, {0x0EC8, 0x0ECD},
+        {0x0F18, 0x0F19}, {0x0F35, 0x0F35}, {0x0F37, 0x0F37}, {0x0F39, 0x0F39},
+        {0x0F71, 0x0F7E}, {0x0F80, 0x0F84}, {0x0F86, 0x0F87}, {0x0F90, 0x0F97},
+        {0x0F99, 0x0FBC}, {0x0FC6, 0x0FC6}, {0x102D, 0x1030}, {0x1032, 0x1032},
+        {0x1036, 0x1037}, {0x1039, 0x1039}, {0x1058, 0x1059}, {0x17B7, 0x17BD},
+        {0x17C6, 0x17C6}, {0x17C9, 0x17D3}, {0x18A9, 0x18A9}, {0x20D0, 0x20E3},
+        {0x302A, 0x302F}, {0x3099, 0x309A}, {0xFB1E, 0xFB1E}, {0xFE20, 0xFE23}
+    };
+
+    return intable(c, composing, (sizeof(composing) / sizeof(struct interval)));
+}
+
+/*
+ * Return TRUE if "curr_c" is a shaped/joined/combined character.
+ * This means it will be removed and the previous character will
+ * get a different form (in short it will turn 2 characters into
+ * 1 - where that one has a transformed look).  So the need to
+ * account for the removed character (don't count it).
+ */
+        int
+utf_iscombined(curr_c)
+        int curr_c;
+{
+     static int prev_c;
+     int i;
+     int ret = FALSE;
+
+     static struct interval combining[] =
+     {
+        {0x0644, 0x0622}, {0x0644, 0x0623}, {0x0644, 0x0625}, {0x0644, 0x0627}
+     };
+
+     /* Table is small enough to completely traverse */
+     for(i = 0;
+        i < sizeof(combining)/sizeof(struct interval);
+        i++)
+     {
+          if( prev_c == combining[i].first &&
+              curr_c == combining[i].last )
+          {
+               ret = TRUE;
+          }
+     }
+
+     prev_c = curr_c;
+     return (ret);
+};
+
+
+#define IS_UTF8_4BYTE(c) ( ((c) & 0xf8) == 0xf0 )
+#define IS_UTF8_3BYTE(c) ( ((c) & 0xf0) == 0xe0 )
+#define IS_UTF8_2BYTE(c) ( ((c) & 0xe0) == 0xc0 )
+#define IS_UTF8_TRAIL(c) ( ((c) & 0xc0) == 0x80 )
+
+/*
+ * Return the unicode encoding of a multibyte character.
+ */
+        static int
+bytes2utf(c)
+        int c;
+{
+        int mbyte_hex = 0;
+        int mbyte_len = 0;
+
+        /*
+         * Since linebuf is a progressively built array, scan past
+         * entries to find those 4,3,2 multi-byte (mbyte) characters.
+         * Decode 'em and generate their appropriate Unicode encodings
+         */
+        if (IS_UTF8_4BYTE(linebuf[curr-3]))
+        {
+             mbyte_len = 4;
+             mbyte_hex = ((linebuf[curr-3] & 0x07) << 18) +
+                         ((linebuf[curr-2] & 0x3f) << 12) +
+                         ((linebuf[curr-1] & 0x3f) << 6)  +
+                         (c & 0x3f);
+             return (mbyte_hex);
+        }
+        if (IS_UTF8_3BYTE(linebuf[curr-2]))
+        {
+             mbyte_len = 3;
+             mbyte_hex = ((linebuf[curr-2] & 0x0f) << 12) +
+                         ((linebuf[curr-1] & 0x3f) << 6)  +
+                         (c & 0x3f);
+             return (mbyte_hex);
+        }
+        if (IS_UTF8_2BYTE(linebuf[curr-1]))
+        {
+             mbyte_len = 2;
+             mbyte_hex = ((linebuf[curr-1] & 0x1f) << 6) +
+                         (c & 0x3f);
+             return (mbyte_hex);
+        }
+
+        return (mbyte_hex);
+}
+
+/*
  * Return the printing width of a given character and attribute,
  * if the character were added to the current position in the line buffer.
  * Adding a character with a given attribute may cause an enter or exit
@@ -326,9 +494,43 @@
 	int a;
 {
 	register int w;
+        int hex_val;
 
-	if (utf_mode && IS_CONT(c))
+        if (utf_mode)
+        {
+             /*
+              * Deal with,
+              * - continuation bytes of a multi-byte (mbyte) character
+              * - (hack) end of line mbytes scenarios
+              *
+              * In order to remove the "end-of-line (column compare) hack",
+              * this application should really group mbyte bytes sequences
+              * together in the code in general instead of their respective
+              * byte representations, so instead of passing 0xD9, 0x84 bytes
+              * around, pass-in the actual Unicode encoding (ie. 0x0644).
+              * Rationale: one needs to see all the bytes of a mbyte
+              * character before a decision is made on what the character
+              * encoding is - requiring some backtracking and hand-waving
+              * which is ugly.
+              */
+             if (IS_CONT(c) || (column == sc_width))
+             {
+                  /* Get Unicode encoding of the mbyte character */
+                  hex_val = bytes2utf(c);
+
+                  /* Composing and combining character count corrections */
+                  if (utf_iscomposed(hex_val) || utf_iscombined(hex_val))
+                  {
+                       /* Column compare is part of hack otherwise backtrack */
+                       if (column == sc_width)
+                            return (0);
+                       else
+                            return (-1);
+                  }
+                  /* Ignore all other continuation mbyte characters */
 		return (0);
+             }
+        }
 
 	if (c == '\b')
 		/*
@@ -565,11 +767,6 @@
 	}
 	return (r);
 }
-
-#define IS_UTF8_4BYTE(c) ( ((c) & 0xf8) == 0xf0 )
-#define IS_UTF8_3BYTE(c) ( ((c) & 0xf0) == 0xe0 )
-#define IS_UTF8_2BYTE(c) ( ((c) & 0xe0) == 0xc0 )
-#define IS_UTF8_TRAIL(c) ( ((c) & 0xc0) == 0x80 )
 
 	static int
 do_append(c, pos)
