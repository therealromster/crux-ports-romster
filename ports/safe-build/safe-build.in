#!/usr/bin/env bash

# Script to test own ports under a fresh install chroot enviroment or using the official image.

init() {

   	mkdir -p \
        $SAFE_BUILD_DIR/var/lib/pkg/rejected \
        $SAFE_BUILD_DIR/usr/ports/{distfiles,packages,work}

    touch $SAFE_BUILD_DIR/var/lib/pkg/db
}

setup_system() {
    local p

    init

    echo 'Seting up environment type: current system.'
   	
    echo -n 'Installing toolchain'
	cd '/usr/ports/core'
    
	for p in $SAFE_BUILD_TOOLCHAIN; do
		cd $p
		. Pkgfile

		if [ ! -e "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" ]; then
			pkgmk -f
		fi

		pkgadd -r "$SAFE_BUILD_DIR" "/usr/ports/packages/$name#$version-$release.pkg.tar.gz"
        ln  "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" "$SAFE_BUILD_DIR/usr/ports/packages/"
        echo -n '.'
		cd ..
	done
    echo ''

	echo -n 'Installing Core ports'
	for p in *; do
		if [ $p != "$(echo "$SAFE_BUILD_TOOLCHAIN" | grep --only-matching $p)" ]; then

			cd $p
			. Pkgfile

			if [ ! -e "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" ]; then
				pkgmk -f
			fi

			pkgadd -r "$SAFE_BUILD_DIR" "/usr/ports/packages/$name#$version-$release.pkg.tar.gz"
            ln  "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" "$SAFE_BUILD_DIR/usr/ports/packages/"
            echo -n '.'
			cd ..
		fi
	done
    echo ''

    if [ "$SAFE_BUILD_OPT_PORTS" = 'yes' ]; then
        echo -n 'Installing opt ports'
        cd '/usr/ports/'

        for p in opt/*; do
		    cd $p
		    . Pkgfile

		    if [ ! -e "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" ]; then
		    	pkgmk -f
		    fi

	    	pkgadd -r "$SAFE_BUILD_DIR" "/usr/ports/packages/$name#$version-$release.pkg.tar.gz"
            ln  "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" "$SAFE_BUILD_DIR/usr/ports/packages/"
            echo -n '.'
		    cd ..
	    done
        echo ''
    fi
   
    install_additional_ports
}

setup_image() {
    local p PKG IMAGE FILE

    SAFE_BUILD_IMAGE_PATH="`echo $SAFE_BUILD_IMAGE |sed -e "s/^\(.*\)\/\(.*\)-\(.*\)\.iso.*$/\1/"`"
    SAFE_BUILD_IMAGE_NAME="`echo $SAFE_BUILD_IMAGE |sed -e "s/^\(.*\)\/\(.*\)-\(.*\)\.iso.*$/\2/"`"
    SAFE_BUILD_IMAGE_VERSION="`echo $SAFE_BUILD_IMAGE |sed -e "s/^\(.*\)\/\(.*\)-\(.*\)\.iso.*$/\3/"`"
    IMAGE="$SAFE_BUILD_IMAGE_PATH/$SAFE_BUILD_IMAGE_NAME-$SAFE_BUILD_IMAGE_VERSION.iso"

    init

   	echo 'Setting up environment type: CD image.'
    if [ -f "$IMAGE" ]; then
        mount -o loop "$IMAGE" "$SAFE_BUILD_CD_MOUNT"
    else
        echo "Error can not find '$IMAGE'."
        exit 1
    fi
	
    ###########################################################################

	echo -n 'Installing core ports'
    cd "$SAFE_BUILD_CD_MOUNT/crux"

    for PKG in core/*; do
		pkgadd -r "$SAFE_BUILD_DIR" "$PKG"
        cp "$PKG" "$SAFE_BUILD_DIR/usr/ports/packages/"
        echo -n '.'
	done
    echo ''

    if [ "$SAFE_BUILD_CDIMAGE_PACKAGES_UPDATE_CORE" = 'yes' ]; then
       echo -n 'Updating available upto date packages for core'
       cd '/usr/ports/core'
    	for PKG in *; do
            cd $PKG
            . Pkgfile
            FILE="$name#$version-$release.pkg.tar.gz"
            if [ -f "/usr/share/safe-build/packages/$CRUX_VERSION/$FILE" ]; then
    		    pkgadd -u -r "$SAFE_BUILD_DIR" "/usr/share/safe-build/packages/$FILE"
                echo -n '.'
            fi
            cd ..
    	done
        echo ''
    fi

    ###########################################################################
    
    if [ "$SAFE_BUILD_CDIMAGE_PORTS_OPT" = 'yes' ]; then
        echo -n 'Installing opt ports'
        cd "$SAFE_BUILD_CD_MOUNT/crux"

        for PKG in opt/*; do
    		pkgadd -r "$SAFE_BUILD_DIR" "$PKG"
            echo -n '.'
    	done
        echo ''
        
        if [ "$SAFE_BUILD_CDIMAGE_PACKAGES_UPDATE_OPT" = 'yes' ]; then
            echo -n 'Installing available upto date packages for opt'
            cd '/usr/ports/opt'
            for PKG in *; do
		        cd $PKG
                if [ -f Pkgfile ]; then
                    . Pkgfile
                    FILE="$name#$version-$release.pkg.tar.gz"
                    if [ -f "/usr/share/safe-build/packages/$CRUX_VERSION/$FILE" ]; then
		                pkgadd -u -r "$SAFE_BUILD_DIR" "/usr/share/safe-build/packages/$CRUX_VERSION/$FILE"
                        echo -n '.'
                    fi
                fi
		        cd ..
            done
    
            echo ''
        else
            cd "$SAFE_BUILD_CD_MOUNT/crux"
            #cp opt/* "$SAFE_BUILD_DIR/usr/ports/packages/"
        fi
    fi

    ###########################################################################

    if [ "$SAFE_BUILD_CDIMAGE_PACKAGES_INSTALL_XORG" = 'yes' ]; then
       echo -n 'Installing available packages for xorg'
       cd '/usr/ports/xorg'

    	for p in *; do
    		cd $p
            if [ -f Pkgfile ]; then
                . Pkgfile
                
                if [ -f "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" ]; then
                    #cp  "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" "$SAFE_BUILD_DIR/usr/ports/packages/"
                    pkgadd -r "$SAFE_BUILD_DIR" "/usr/ports/packages/$name#$version-$release.pkg.tar.gz"
                    echo -n '.'
                fi
            fi
	    	cd ..
    	done
        echo ''
    else
        cd "$SAFE_BUILD_CD_MOUNT/crux"
        #cp xorg/* "$SAFE_BUILD_DIR/usr/ports/packages/"
    fi

    ###########################################################################

    umount "$SAFE_BUILD_CD_MOUNT"
    install_additional_ports
}

install_additional_ports() {
    local PKG

	if [ "$SAFE_BUILD_ADDITIONAL_PORTS" ]; then
        echo -n 'Installing additional ports'
        cd '/usr/ports/'

	    for PKG in $SAFE_BUILD_ADDITIONAL_PORTS; do
	        if [ -f $PKG/Pkgfile ]; then
                cd $PKG
                . Pkgfile
	        	if [ ! -e "/usr/ports/packages/$name#$version-$release.pkg.tar.gz" ]; then
	        		pkgmk -f
	        	fi
	        	pkgadd -r "$SAFE_BUILD_DIR" "/usr/ports/packages/$name#$version-$release.pkg.tar.gz"
                echo -n '.'
	        	cd ..
            else
                echo ''
                echo -n "Warning $PKG/Pkgfile is missing, skipping."
            fi
    	done
        echo ''
    fi

    rest
}

rest() {
    local REPO FILE

	# copy DNS settings
	cp /etc/resolv.conf "$SAFE_BUILD_DIR/etc/"

	# copy port settings
	#cp /etc/prt-get.conf "$SAFE_BUILD_DIR/etc/"

    if [ -e "$SAFE_BUILD_DIR/etc/ports/contrib.rsync.inactive" ]; then
		mv $SAFE_BUILD_DIR/etc/ports/contrib.rsync.inactive $SAFE_BUILD_DIR/etc/ports/contrib.rsync
	fi

	# activate contrib ports and copy over existing repos
	sed -i "$SAFE_BUILD_DIR/etc/pkgmk.conf" \
		-e 's|# PKGMK_SOURCE_DIR="$PWD"|PKGMK_SOURCE_DIR="/usr/ports/distfiles"|' \
		-e 's|# PKGMK_PACKAGE_DIR="$PWD"|PKGMK_PACKAGE_DIR="/usr/ports/packages"|' \
        -e 's|# PKGMK_WORK_DIR="$PWD"|PKGMK_WORK_DIR="/usr/ports/work/$name"|'			

	echo -n 'Installing ports tree'
	for REPO in $SAFE_BUILD_PORTS_TREE; do
        if [ -f "/etc/ports/$REPO.sync" ] && [ ! -f "$SAFE_BUILD_DIR/etc/ports/$REPO.sync" ]; then
           ln "/etc/ports/$REPO.sync" "$SAFE_BUILD_DIR/etc/ports/"
           echo -n '.'
        elif [ -f "/etc/ports/$REPO.httpup" ] && [ ! -f "$SAFE_BUILD_DIR/etc/ports/$REPO.httpup" ]; then
            ln "/etc/ports/$REPO.httpup" "$SAFE_BUILD_DIR/etc/ports/"
            echo -n '.'
        fi
    done    
    
    # copy files over so a 'ports -u' dosn't take so long to do
	cd '/usr/ports/'
    for REPO in $SAFE_BUILD_PORTS_TREE; do
		if [ $REPO	!= distfiles ] && [ $REPO != packages ] && [ $REPO != work ]; then
            if [ ! -e "$SAFE_BUILD_DIR/usr/ports/" ]; then
                cp -R $REPO "$SAFE_BUILD_DIR/usr/ports/"
            fi
            echo -n '.'
		fi
	done
    echo ''
    
	echo -n 'Hardlinking source files'
	cd '/usr/ports/distfiles'

    for FILE in *; do
        if [ ! -e "$SAFE_BUILD_DIR/usr/ports/distfiles/" ]; then
            ln $FILE "$SAFE_BUILD_DIR/usr/ports/distfiles/"
            echo -n '.'
        fi
	done
    echo ''

    # install script to chroot
    cp "/usr/sbin/${SAFE_BUILD_COMMAND##*/}" "$SAFE_BUILD_DIR/usr/sbin/"
    #start_chroot
    restore_ports
}

start_chroot() {
   	echo 'Activate chroot!'
	cd "$SAFE_BUILD_DIR"
	mount -t proc proc "$SAFE_BUILD_DIR/proc"
	mount --bind /dev "$SAFE_BUILD_DIR/dev"
	#mount -t devpts devpts "$SAFE_BUILD_DIR/dev/pts"
	chroot "$SAFE_BUILD_DIR" /bin/sh
}

shutdown_umount() {
   #umount /dev/pts
   umount /dev
   umount /proc
   #rm "$SAFE_BUILD_DIR/dev/console"
}

backup_ports() {
    local FILE

    echo -n 'Backing up ports'
    cd "$SAFE_BUILD_DIR/usr/ports/packages"
    if [ ! -d "$SAFE_BUILD_DIR/usr/ports/packages/$CRUX_VERSION" ]; then
        mkdir $CRUX_VERSION
    fi
    for FILE in *; do
        if [ ! -f "/usr/share/safe-build/packages/$CRUX_VERSION/$FILE" ]; then
            ln "$SAFE_BUILD_DIR/usr/ports/packages/$FILE" "/usr/share/safe-build/packages/$CRUX_VERSION/$FILE"
            echo -n '.'
        fi
    done
    cd "$SAFE_BUILD_DIR/usr/ports/distfiles"
    for FILE in *; do
        if [ ! -f "/usr/ports/distfiles/$FILE" ]; then
            ln "$SAFE_BUILD_DIR/usr/ports/distfiles/$FILE" "/usr/ports/distfiles/$FILE"
            echo -n '.'
        fi
    done
    echo ''
}

restore_ports() {
    local FILE
    echo 'Restoring backed up ports'
    cd "/usr/share/safe-build/packages/$CRUX_VERSION"
    for FILE in *; do
        if [ ! -e "$SAFE_BUILD_DIR/usr/share/safe-build/packages/$CRUX_VERSION/$FILE" ]; then
            ln "/usr/share/safe-build/packages/$CRUX_VERSION/$FILE" "$SAFE_BUILD_DIR/usr/ports/packages/$FILE"
            echo -n '.'
        fi
    done
    echo ''
    start_chroot
}

clean_chroot() {
    local FILE LIST PKG TOTAL COUNT LINE I REQUIRED

    FILE='/tmp/.safe-build' #TODO make global
    REQUIRED=(`ls --color=never /usr/ports/core/ |xargs` safe-build)
    LIST=(${REQUIRED[@]} ${SAFE_BUILD_CLEAN_RECOMENDED[@]} ${SAFE_BUILD_CLEAN_OPTIONAL[@]})

    pkginfo -i |awk '{print $1}' > $FILE.clean
    for PKG in "${LIST[@]}"; do
       	sed -i -e "/^$PKG$/d" $FILE.clean
    done
    TOTAL=`cat $FILE.clean |wc -w`
    COUNT=1
    cat $FILE.clean |while read LINE; do
        I=`printf  "%.0f\n" $(bc -l <<< "($COUNT / $TOTAL) * 100")`
        if (( $I < 10 )); then
            echo "[$I%  ] Removing: $LINE"
        elif (( $I < 100 )); then
            echo "[$I% ] Removing: $LINE"
        else
            echo "[$I%] Removing: $LINE"
        fi
        COUNT=$[$COUNT+1]
        pkgrm "$LINE"
    done
    rm $FILE.clean
}

print_help() {
    echo "usage: ${SAFE_BUILD_COMMAND##*/} [options]"
    echo "options:"
    echo "  -b,   --backup              backup the newly built ports"
    echo "  -i,   --image               use CRUX offical iso"
    #echo "  -r,   --restore             restore backed up ports (reverse of -b)"
    echo "  -s,   --system              use working system ports"
    echo "        --crux=version        use said version defaults to system version"
    echo "  -c    --chroot              chroot back into the directory"
    echo "  -C    --clean               uninstall packages to a clean state"
    echo "  -u    --umount              unmount the chroot (shutdown)"
    echo "  -v,   --version             print version and exit"
    echo "  -h,   --help                print help and exit"
}

parse_options() {
	while [ "$1" ]; do
		case "$1" in
            -b|--backup)
				SAFE_BUILD_BACKUP_PORTS='yes' ;;
			-r|--restore)
                SAFE_BUILD_RESTORE_PORTS='yes' ;;
			-i|--image)
				SAFE_BUILD_SETUP_IMAGE='yes' ;;
			-s|--system)
				SAFE_BUILD_SETUP_SYSTEM='yes' ;;
			-u|--umount)
				SAFE_BUILD_SHUTDOWN_SYSTEM='yes' ;;
            -c|--chroot)
                SAFE_BUILD_SETUP_CHROOT='yes' ;;
            --crux=*)
                SAFE_BUILD_CRUX_VERSION="`echo $1 | sed -e 's|^--crux=\([0-9.]*\)|\1|'`" || exit 1
                SAFE_BUILD_SETUP_IMAGE='yes' ;;
			-C|--clean)
				SAFE_BUILD_CLEAN='yes' ;;
			-v|--version)
				echo "${SAFE_BUILD_COMMAND##*/} chroot wrapper $SAFE_BUILD_VERSION Copyright (c) 2008 by Danny Rawlins "
				exit 0 ;;
			-h|--help)
				print_help
				exit 0 ;;
			*)
				echo "${SAFE_BUILD_COMMAND##*/}: invalid option $1"
				exit 1 ;;
		esac
		shift
	done
}

main() {
   	if [ ! "$@" ]; then
		echo "${SAFE_BUILD_COMMAND##*/} make a chrooted enviroment to test your own ports."
		echo "Try ${SAFE_BUILD_COMMAND##*/} -h (or --help) for more information."
		exit 1
	fi

	parse_options "$@"

	if [ "$SAFE_BUILD_SETUP_IMAGE" = 'yes' ]; then
	   	setup_image
	
	elif [ "$SAFE_BUILD_SETUP_SYSTEM" = 'yes' ]; then
	   	setup_system
	fi

    if [ "$SAFE_BUILD_SETUP_CHROOT" = 'yes' ]; then
        start_chroot
    fi

    if [ "$SAFE_BUILD_CLEAN" = 'yes' ]; then
        clean_chroot
    fi

    if [ "$SAFE_BUILD_SHUTDOWN_SYSTEM" = 'yes' ]; then
        shutdown_umount
    fi

    if [ "$SAFE_BUILD_BACKUP_PORTS" = 'yes' ]; then
        backup_ports
        #echo 'not implemented for argument, currently automated
    
    elif [ "$SAFE_BUILD_RESTORE_PORTS" = 'yes' ]; then
        #restore_ports
        echo 'not implemented for argument, currently automated'
    fi
	
	exit 0
}

#trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

export LC_ALL='POSIX'

readonly SAFE_BUILD_VERSION='@VERSION@'
readonly SAFE_BUILD_COMMAND="$0"
readonly SAFE_BUILD_ROOT="$PWD"
readonly SAFE_BUILD_DIR='/var/tmp/safe-build'
readonly SAFE_BUILD_TOOLCHAIN='binutils glibc gcc module-init-tools libstdc++-compat'

SAFE_BUILD_SETUP_SYSTEM='no'
SAFE_BUILD_SETUP_IMAGE='no'
SAFE_BUILD_SETUP_CHROOT='no'
SAFE_BUILD_SHUTDOWN_SYSTEM='no'
SAFE_BUILD_BACKUP_PORTS='no'
SAFE_BUILD_RESTORE_PORTS='no'
SAFE_BUILD_CLEAN='no'

SAFE_BUILD_CDIMAGE_PORTS_OPT='no'
SAFE_BUILD_CDIMAGE_PACKAGES_UPDATE_CORE='no'
SAFE_BUILD_CDIMAGE_PACKAGES_UPDATE_OPT='no'
SAFE_BUILD_CDIMAGE_PACKAGES_INSTALL_XORG='no'

[ -f '/etc/safe-build.conf' ] && . /etc/safe-build.conf

[ -z "${SAFE_BUILD_CD_MOUNT}" ] && SAFE_BUILD_CD_MOUNT='/mnt/cdrom'
[ -z "${SAFE_BUILD_CRUX_VERSION}" ] && SAFE_BUILD_CRUX_VERSION='@CRUX_VERSION@'

[ -z "${SAFE_BUILD_IMAGE}" ] && SAFE_BUILD_IMAGE="/var/crux-$SAFE_BUILD_CRUX_VERSION.iso"
[ -z "${SAFE_BUILD_IMAGE_CD_PATH}" ] && SAFE_BUILD_IMAGE_CD_PATH='/var'

[ -z "${SAFE_BUILD_PORTS_TREE}" ] && SAFE_BUILD_PORTS_TREE='core opt contrib xorg'

[ -z "${SAFE_BUILD_CLEAN_RECOMENDED}" ] && SAFE_BUILD_CLEAN_RECOMENDED=()
[ -z "${SAFE_BUILD_CLEAN_OPTIONAL}" ] && SAFE_BUILD_CLEAN_OPTIONAL=()

main "$@"

# vim: expandtab:ts=4:sw=4

# End of file.
